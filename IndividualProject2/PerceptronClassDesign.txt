Perceptron Class Design
-------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Declaration

The Perceptron object is declared by passing the learning weight, epoch and save and load triggering (default is false) to constructor. Out of range if r and epoch is negative or 0;
In line 11-12, the weight(W) and row length is initially set to null and 0.

// Perceptron.cpp line 9-17
Perceptron::Perceptron(float r, int epoch, bool saveAndLoad)
{
	W = 0;
	rowLength = 0;

	if (r <= 0) __throw_out_of_range("Usage: r > 0"); this->r = r;
	if (epoch <= 0) __throw_out_of_range("Usage: epoch > 0");this->epoch = epoch;
	this->saveAndLoad = saveAndLoad;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Training

*************************************************************************************************************************************************************
2.1 Initialize Weight (Optional load weight)

The training function first call InitializeW() with the parameter dataset of vector Xi. X is used to know the length of vector.

// Perceptron.cpp line 41-114
void Perceptron::Train(vector< vector < float > > X,
						vector<float> Y,
						float r,
						int epoch)
{
	InitializeW(X);	// Initialize weight
	...
}

In line 58, it checks whether saveAndLoad is true and call LoadWeight() if saveAndLoad is true.

// Perceptron.cpp line 120-153
void Perceptron::InitializeW(vector< vector < float > > X)
{
	cout << "Initialize W" << endl;

	// Get length of row
	vector< vector <float> >::iterator iteratorX = X.begin();
	vector<float>::iterator iteratorXData = (*iteratorX).begin();
	int indexXData = 0;	

	while(iteratorXData != (*iteratorX).end())
	{
		// Increment
		iteratorXData++;
		indexXData++;
	}

	rowLength = indexXData + 1;	// Set row length, including bias

	// Load Weight
	if (!saveAndLoad || !LoadWeight())
	{
		// Initialize if cannot load weight
		float WArray[indexXData];	// Set W array to all 0, except 1st is 1 for bias

		WArray[0] = 1;	// bias
		
		for (int index = 1; index < rowLength; index++)
		{
			WArray[index] = 0;	// weight
		}				

		W = new Vector<float>(WArray, rowLength);	// (b, 0, ..., 0)					
	}
}

In line 85 in LoadWeight(), it checks whether the load disk file. it return true and load the file if the file exist and return false and continue to Initialize a default W in line 58 in LoadWeight().

// Perceptron.cpp line 272-312
bool Perceptron::LoadWeight()
{
	ifstream myfile;
	myfile.open ("weight.txt");

	// Convert text to W
	string weight;
	
	if (myfile.is_open())
	{
		cout << "-------------------------" << "Load Weight" << "-------------------------" << endl;

		float WArray[rowLength];	// Set W array to all 0, except 1st is 1 for bias
		int index = 0;

		// Set weight to W
		while(getline(myfile, weight))
		{
			WArray[index++] = stof(weight);	// bias
		}

		W = new Vector<float>(WArray, rowLength);	// (b, 0, ..., 0)

		myfile.close();

		// Print input weight
		cout << "Input weight: ";
		Vector<float> w = *W;
		w.Print();

		cout << "-------------------------" << "End Load Weight" << "-------------------------\n" << endl;

		return true;
	}
	else
	{
		cout << "No input weight" << endl;

		return false;
	}
}
*************************************************************************************************************************************************************
2.2 Predict

After initialize W, the every vector Xi in dataset X is used to calculating the predicted value. The count of looping X for training depends on the value of epoch.
In line 147, the vector Xi is first convert to the Vector<float> form which is a custom class object(Inidividual assignment 1).
In line 150, the vector Xi is passed to Predict() to calculating the predicted value.

// Perceptron.cpp line 41-114
void Perceptron::Train(vector< vector < float > > X,
						vector<float> Y,
						float r,
						int epoch)
{
	InitializeW(X);	// Initialize weight

	cout << "r = " << r << ", epoch = " << epoch << endl;
	
    for(int epochIndex = 0; epochIndex < epoch; epochIndex++)
	{
		cout << "-------------------------Epoch" << epochIndex + 1 << "-------------------------" << endl;

        int errors = 0;  // record the number of wrong predictions
	
		vector< vector <float> >::iterator iteratorX = X.begin();
		int indexX = 0;

		// Predict X for each row
		while(iteratorX != X.end())	// Loop every row
		{
			// Get Vector<float> form
			Vector<float> rowX = GetRowX(iteratorX);

			// Get predict and real of Y
            ...

			// Fixing weight
            ...

			// Increment
			iteratorX++;
			indexX++;
        }

        cout << "Error: " << errors << endl; // to see how good the model is in this epoch
		cout << "-------------------------end Epoch" << epochIndex << "-------------------------\n" << endl;

		// Stop training when no errors
		if (errors == 0)
		{
			cout << "Training complete at Epoch " << epochIndex + 1 << "\n" << endl;
			break;
		}
		// Have errors but training is completed
		else if (epochIndex == epoch - 1)
		{
			cout << "Training complete but still have errors\n" << endl;
			break;
		}
    }

	// Save weight
	if (saveAndLoad)
	{
		SaveWeight();
	}
}

In Predict(), the weight(W)(includes bias) and vector passed(x) are used to calculate in such form z = wTx, which wT and x are vector. 1 or -1 will be return depends on the value of z.

// Perceptron.cpp line 175-180
int Perceptron::Predict(Vector<float> x)
{
	// z = b + w1*x1 + w2*x2 + ... wn*xn
	float z = VectorDotProduct(*W, x);
	return z >= 0 ? 1 : -1;
}
*************************************************************************************************************************************************************
2.3 Fixing weight

After getting the predicted value, it will be compared by the true value which is collected in parameter Y. The weight(W) will be changed if the predicted value is not the same as the true value.
In line 232-235, the weight(W) is changed with formula W = W + update * Xi, which update is calculated by r * (real Y - predicted Y).

// Perceptron.cpp line 41-114
void Perceptron::Train(vector< vector < float > > X,
						vector<float> Y,
						float r,
						int epoch)
{
	InitializeW(X);	// Initialize weight

	cout << "r = " << r << ", epoch = " << epoch << endl;
	
    for(int epochIndex = 0; epochIndex < epoch; epochIndex++)
	{
		cout << "-------------------------Epoch" << epochIndex + 1 << "-------------------------" << endl;

        int errors = 0;  // record the number of wrong predictions
	
		vector< vector <float> >::iterator iteratorX = X.begin();
		int indexX = 0;

		// Predict X for each row
		while(iteratorX != X.end())	// Loop every row
		{
			// Get Vector<float> form
			Vector<float> rowX = GetRowX(iteratorX);

			// Get predict and real of Y
            int predictY = Predict(rowX);	// Predict current row
			int realY = Y.at(indexX);

			// Fixing weight
            if (predictY != realY)	// if prediction is wrong
			{
				float update = r * (realY - predictY);

				// W = W + update * Xi;  // element-wise operation, including the bias
				W = VectorAddition<float>(rowX, *W, update);
				errors++;

				// Print error row
				cout << "row: " << indexX << ", Compare: " << predictY << " " << realY << endl;
			}

			// Increment
			iteratorX++;
			indexX++;
        }

        cout << "Error: " << errors << endl; // to see how good the model is in this epoch
		cout << "-------------------------end Epoch" << epochIndex << "-------------------------\n" << endl;

		// Stop training when no errors
		if (errors == 0)
		{
			cout << "Training complete at Epoch " << epochIndex + 1 << "\n" << endl;
			break;
		}
		// Have errors but training is completed
		else if (epochIndex == epoch - 1)
		{
			cout << "Training complete but still have errors\n" << endl;
			break;
		}
    }

	// Save weight
	if (saveAndLoad)
	{
		SaveWeight();
	}
}
*************************************************************************************************************************************************************
2.4 Save weight

After whole training process complete, the weight will be saved to local disk file depends on the saveAndLoad boolean.

// Perceptron.cpp line 41-114
void Perceptron::Train(vector< vector < float > > X,
						vector<float> Y,
						float r,
						int epoch)
{
	...

	// Save weight
	if (saveAndLoad)
	{
		SaveWeight();
	}
}

// Perceptron.cpp line 253-270
void Perceptron::SaveWeight()
{
	cout << "-------------------------" << "Save Weight" << "-------------------------" << endl;

	ofstream myfile;
	myfile.open ("weight.txt");

	// Convert W to text
	Vector<float> w = *W;
	string weight = w.GetData();
	myfile << weight;

	cout << "Output weight: \n" << weight << endl;

	myfile.close();

	cout << "-------------------------" << "End Save Weight" << "-------------------------\n" << endl;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Member Functions

There is member functions for setting variable after declare perceptron object.

// Perceptron.cpp 19-32
void Perceptron::SetLearningRate(float r)
{
	this->r = r;
}

void Perceptron::SetEpoch(int epoch)
{
	this->epoch = epoch;
}

void Perceptron::SetInputWeight(bool inputWeight)
{
	this->saveAndLoad = inputWeight;
}